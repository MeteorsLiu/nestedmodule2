name: Continuous Integration

on:
  pull_request:
    branches:
      - main

permissions:
  contents: read

jobs:
  test-javascript:
    name: JavaScript Tests
    strategy:
      matrix:
        os:
          - macos-latest
          - ubuntu-24.04
        llvm: [18]
    runs-on: ${{matrix.os}}

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"

      - name: Install dependencies
        if: startsWith(matrix.os, 'macos')
        run: |
          brew update
          brew install llvm@${{ matrix.llvm }} bdw-gc openssl libffi
          brew link --force libffi
          echo "$(brew --prefix llvm@${{ matrix.llvm }})/bin" >> $GITHUB_PATH

          # llcppg dependencies
          brew install cjson

      - name: Install dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          echo "deb http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs)-${{ matrix.llvm }} main" | sudo tee /etc/apt/sources.list.d/llvm.list
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo apt-get update
          sudo apt-get install -y llvm-${{ matrix.llvm }}-dev clang-${{ matrix.llvm }} libunwind-dev libclang-${{ matrix.llvm }}-dev lld-${{ matrix.llvm }} pkg-config libgc-dev libssl-dev zlib1g-dev libffi-dev libcjson-dev
          echo "/usr/lib/llvm-${{ matrix.llvm }}/bin" >> $GITHUB_PATH
      - name: Install LLGO
        run: |
          git clone https://github.com/goplus/llgo.git
          echo $PWD
          cd llgo/compiler
          go install -v ./cmd/...
          export LLGO_ROOT=$GITHUB_WORKSPACE/llgo
          echo "LLGO_ROOT=$LLGO_ROOT" >> $GITHUB_ENV
      - name: Install LLCppg
        run: |
          git clone https://github.com/goplus/llcppg.git
          echo $PWD
          cd llcppg
          llgo install ./_xtool/llcppsymg
          llgo install ./_xtool/llcppsigfetch
          go install ./cmd/llcppcfg
          go install ./cmd/gogensig
          go install .
      - uses: 8BitJonny/gh-get-current-pr@3.0.0
        id: PR
      - run: echo "PR ${prNumber} ${prTitle} at ${prUrl} is ${prJSON}"
        if: steps.PR.outputs.pr_found == 'true'
        env:
          # JSON object with the full PR object
          # toJSON(fromJSON(...pr)) parses it into memory and then format is with pretty-print.
          prJSON: ${{ toJSON(fromJSON(steps.PR.outputs.pr)) }}
          # Direct access to common PR properties
          prNumber: ${{ steps.PR.outputs.number }}
          prUrl: ${{ steps.PR.outputs.pr_url }}
          prTitle: ${{ steps.PR.outputs.pr_title }}
          prBody: ${{ steps.PR.outputs.pr_body }}
          prCreatedAt: ${{ steps.PR.outputs.pr_created_at }}
          prMergedAt: ${{ steps.PR.outputs.pr_merged_at }}
          prClosedAt: ${{ steps.PR.outputs.pr_closed_at }}
          prLabel: ${{ steps.PR.outputs.pr_labels }}
